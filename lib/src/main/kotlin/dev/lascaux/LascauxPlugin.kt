/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.lascaux

import java.io.File
import java.io.PrintStream
import java.util.jar.JarFile
import java.nio.file.FileSystems
import java.nio.file.Paths
import java.nio.file.Files
import java.nio.file.OpenOption
import java.nio.file.StandardOpenOption
import java.net.URI

import org.jetbrains.kotlin.cli.common.CLIConfigurationKeys
import org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments
import org.jetbrains.kotlin.cli.common.messages.MessageCollector
import org.jetbrains.kotlin.cli.common.messages.MessageRenderer
import org.jetbrains.kotlin.cli.common.messages.PrintingMessageCollector
import org.jetbrains.kotlin.cli.jvm.K2JVMCompiler
import org.jetbrains.kotlin.config.Services
import org.jetbrains.kotlin.config.CompilerConfiguration

import org.bukkit.Bukkit
import org.bukkit.plugin.java.JavaPlugin

import org.eclipse.aether.RepositorySystem
import org.eclipse.aether.RepositorySystemSession
import org.eclipse.aether.artifact.DefaultArtifact
import org.eclipse.aether.collection.CollectRequest
import org.eclipse.aether.repository.RemoteRepository
import org.eclipse.aether.resolution.DependencyRequest
import org.eclipse.aether.util.repository.AuthenticationBuilder
import org.eclipse.aether.util.artifact.JavaScopes
import org.eclipse.aether.DefaultRepositorySystemSession
import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory
import org.eclipse.aether.spi.connector.RepositoryConnectorFactory
import org.eclipse.aether.transport.file.FileTransporterFactory
import org.eclipse.aether.transport.http.HttpTransporterFactory
import org.eclipse.aether.supplier.RepositorySystemSupplier
import org.eclipse.aether.graph.Dependency
import org.eclipse.aether.graph.DependencyNode
import org.eclipse.aether.graph.DependencyFilter
import org.eclipse.aether.repository.LocalRepository

public class LascauxPlugin : JavaPlugin() {
    override fun onEnable() {
        val dataFolderPath = getDataFolder().path
        val compiler = K2JVMCompiler()
        val args = K2JVMCompilerArguments().apply {
            freeArgs = listOf(dataFolderPath + "/code.kt")
            destination = dataFolderPath + "/code.jar"
            kotlinHome = dataFolderPath
            classpath = dataFolderPath + "/kotlin-reflect.jar:" + dataFolderPath + "/kotlin-script-runtime.jar:" + dataFolderPath + "/kotlin-stdlib.jar:" + dataFolderPath + "/spigot-api.jar"
            noStdlib = true
        }
        
        val errorPs = PrintStream(System.err)
        compiler.execImpl(PrintingMessageCollector(errorPs, MessageRenderer.PLAIN_RELATIVE_PATHS, args.verbose), Services.EMPTY, args)

        val fs = FileSystems.newFileSystem(URI.create("jar:file:" + Paths.get(dataFolderPath).toAbsolutePath().toString() + "/code.jar"), mapOf<String, String>())
        fs.use {
            Files.write(fs.getPath("/plugin.yml"), """
                main: testplugin.TestPlugin
                name: TestPlugin
                version: 1.0
            """.trimMargin().toByteArray(), StandardOpenOption.CREATE, StandardOpenOption.WRITE)
        }

        val pl = Bukkit.getPluginManager().loadPlugin(File(dataFolderPath + "/code.jar"))
        Bukkit.getPluginManager().enablePlugin(pl!!)

        resolveDependencies()
    }
}

fun resolveDependencies(): List<File> {
    val system = RepositorySystemSupplier().get()

    val session = DefaultRepositorySystemSession().setSystemProperties(System.getProperties())
    session.localRepositoryManager = system.newLocalRepositoryManager(session, LocalRepository("./repo"))

    val remoteRepo = RemoteRepository.Builder("central", "default", "https://repo1.maven.org/maven2").build()

    val artifact = DefaultArtifact("com.google.code.gson:gson:2.10.1")

    val collectRequest = CollectRequest().setRoot(Dependency(artifact, "compile")).addRepository(remoteRepo)
    val dependencyRequest = DependencyRequest(collectRequest) { node, parents ->
        node.dependency.scope == "compile" && parents.map { p -> p.dependency.scope == "compile" }.fold(true) { a, b -> a && b }
    }

    val dependencyResult = system.resolveDependencies(session, dependencyRequest)

    return dependencyResult.artifactResults.map { it.artifact.file }
}
