/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.lascaux

import java.io.File
import java.io.FileOutputStream
import java.io.PrintStream
import java.util.jar.JarFile
import java.nio.file.FileSystems
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.Files
import java.nio.file.OpenOption
import java.nio.file.StandardOpenOption
import java.net.URI

import kotlinx.coroutines.runBlocking

import org.jetbrains.kotlin.cli.common.CLIConfigurationKeys
import org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments
import org.jetbrains.kotlin.cli.common.messages.MessageCollector
import org.jetbrains.kotlin.cli.common.messages.MessageRenderer
import org.jetbrains.kotlin.cli.common.messages.PrintingMessageCollector
import org.jetbrains.kotlin.cli.jvm.K2JVMCompiler
import org.jetbrains.kotlin.config.Services
import org.jetbrains.kotlin.config.CompilerConfiguration

import org.bukkit.Bukkit
import org.bukkit.plugin.java.JavaPlugin

import org.eclipse.aether.RepositorySystem
import org.eclipse.aether.RepositorySystemSession
import org.eclipse.aether.artifact.DefaultArtifact
import org.eclipse.aether.collection.CollectRequest
import org.eclipse.aether.repository.RemoteRepository
import org.eclipse.aether.resolution.DependencyRequest
import org.eclipse.aether.util.repository.AuthenticationBuilder
import org.eclipse.aether.util.artifact.JavaScopes
import org.eclipse.aether.DefaultRepositorySystemSession
import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory
import org.eclipse.aether.spi.connector.RepositoryConnectorFactory
import org.eclipse.aether.transport.file.FileTransporterFactory
import org.eclipse.aether.transport.http.HttpTransporterFactory
import org.eclipse.aether.supplier.RepositorySystemSupplier
import org.eclipse.aether.graph.Dependency
import org.eclipse.aether.graph.DependencyNode
import org.eclipse.aether.graph.DependencyFilter
import org.eclipse.aether.repository.LocalRepository

import org.http4k.client.ApacheClient
import org.http4k.core.Request
import org.http4k.core.Method

public class LascauxPlugin : JavaPlugin() {
    val ktHome = Paths.get(dataFolder.path, "internal").toAbsolutePath()

    override fun onEnable() {
        retrieveDeps()

        val jarPath = Paths.get(dataFolder.path, "plugin.jar").toAbsolutePath()
        doCompile(jarPath)
        addPluginYml(jarPath)

        val pl = Bukkit.getPluginManager().loadPlugin(File(jarPath.toString()))
        Bukkit.getPluginManager().enablePlugin(pl!!)
    }

    fun retrieveDeps() {
        // Make sure we have all the requisite dependencies
        val requiredDeps = mapOf(
            "kotlin-reflect.jar" to "https://repo1.maven.org/maven2/org/jetbrains/kotlin/kotlin-reflect/1.9.0/kotlin-reflect-1.9.0.jar",
            "kotlin-script-runtime.jar" to "https://repo1.maven.org/maven2/org/jetbrains/kotlin/kotlin-script-runtime/1.9.0/kotlin-script-runtime-1.9.0.jar",
            "kotlin-stdlib.jar" to "https://repo1.maven.org/maven2/org/jetbrains/kotlin/kotlin-stdlib/1.9.0/kotlin-stdlib-1.9.0.jar",
            "spigot-api.jar" to "https://hub.spigotmc.org/nexus/service/local/repositories/snapshots/content/org/spigotmc/spigot-api/1.20-R0.1-SNAPSHOT/spigot-api-1.20-R0.1-20230612.113428-32.jar"
        )

        File(ktHome.toString(), "lib").mkdirs()
        val client = ApacheClient()
        for ((dep, url) in requiredDeps) {
            val file = File(Paths.get(ktHome.toString(), "lib", dep).toString())
            if (!file.exists()) {
                runBlocking {
                    val req = Request(Method.GET, url)
                    val jar = client(req).body.stream
                    
                    logger.info("${file.name} not found; downloading it...")
                    FileOutputStream(file).use { out ->
                        val buf = ByteArray(1024)
                        while (true) {
                            val size = jar.read(buf)
                            if (size <= 0) {
                                break
                            }

                            out.write(buf, 0, size)
                        }
                    }
                    logger.info("Successfully downloaded ${file.name}")
                }
            }
        }
    }

    fun doCompile(jarPath: Path) {
        // find source files
        val srcFiles = File(dataFolder.path)
            .listFiles { _: File, name: String -> name.endsWith(".kt") }
            .toList()
            .map { f -> f.path }

        val compiler = K2JVMCompiler()
        val args = K2JVMCompilerArguments().apply {
            freeArgs = srcFiles
            destination = jarPath.toString()
            kotlinHome = ktHome.toString()
            classpath = Paths.get(ktHome.toString(), "lib", "spigot-api.jar").toString()
        }
        
        val errorPs = PrintStream(System.err)
        compiler.execImpl(PrintingMessageCollector(errorPs, MessageRenderer.PLAIN_RELATIVE_PATHS, args.verbose), Services.EMPTY, args)
    }

    fun addPluginYml(jarPath: Path) {
        FileSystems
            .newFileSystem(URI.create("jar:file:$jarPath"), mapOf<String, String>())
            .use { fs ->
                Files.write(fs.getPath("/plugin.yml"), """
                    main: dev.lascaux.compiled.Plugin
                    name: LascauxCompiledPlugin
                    version: 1.0
                    api-version: '1.20'
                """.trimMargin().toByteArray(), StandardOpenOption.CREATE, StandardOpenOption.WRITE)
            }
    }
}

